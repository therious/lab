TestClassParams:
  alpha: 1
  beta: 2

bootSequence:
  - TestClass
  - InjectedStateForms

sequence:
  abc:
    - fdff
    - sadfo
  another:
    - you
    - me

tokens:
  - stateMachines.subscription
  - stateMachines.securityLight
  - stateMachines.subscription.states
  - stateMachines.subscription.context


#  every possible state
#Startup:        we know nothing
#NoMemoryMaps!:  (terminal) the app environment does not even support mapping files
#Unmapped!:      (terminal) requested file is not mapped
#Mapped:         file was found will attempt to subscript
#  the requested file is mapped, but the physical file cannot be found
#  the physical file is found but it must be corrupt, since reading it produces an exception
#  the file is successfully read, we are current as long as it updates on time
#  it updates on time, but the status within the update says upstream UIB is not communicating
#  no update has been received for a short while
#  no update has been received for a long while
#  const hbSecs = 10;
#  const hbMax  = 3;


stateMachines:
  securityLight:
    name: seclight
    start: Night
    states:
      - Night
      - Day
      - On
    context:
        ambientLight: 0.1
    transitions: [
      {from: Day,        to: Night,   cond: dimlight  }, # transition on variable changes
      {from: [Night, On], to: Day,    cond: daylight  },
      {from: [Night, On], to: On,      evt: motion    }, # transition on receiving event tokens
      {from: On,         to: Night,  after: 5000      } # fizbin generates timer based events
    ]
  subscription:
    name: subscription
    start: Startup
    target: Current
    states:
      - Startup
      - NoMemoryMaps
      - Unmapped
      - Mapped
      - NoFile
      - FileOpened
      - CorruptionError
      - Current
      - Stale
      - Toast
    context:
      fileKey:
      filePath:
      lastUicHb: -1
      lastUibHb: -1

    transitions: [
      { from: Startup,            to: NoMemoryMaps,     evt: nomaps     },
      { from: Startup,            to: Unmapped,         evt: keymissing },
      { from: Startup,            to: Mapped,           evt: keyfound   },

      { from: [ Mapped, NoFile ], to: FileOpened,       evt: opensuccess  },
      { from: [ Mapped, NoFile ], to: NoFile,           evt: exception    },

      { from: FileOpened,         to: Current,          evt: blah       },
      { from: FileOpened,         to: CorruptionError,  evt: exception  },
      { from: Current,            to: CorruptionError,  evt: exception  },
      { from: Current,            to: Current,          evt: heartbeat  },

      { from: Stale,              to: Current,          evt: heartbeat  },
      { from: Current,            to: Stale,            after: 10000    },
      { from: Stale,              to: Toast,            after: 20000    },
    ]


